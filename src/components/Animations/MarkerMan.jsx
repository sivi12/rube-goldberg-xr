/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.4.1 public/markerMan.glb 
*/

import React, { useEffect, useState } from "react";
import { useGraph } from "@react-three/fiber";
import { useGLTF, useAnimations } from "@react-three/drei";
import { SkeletonUtils } from "three-stdlib";

export function MarkerManModel2({
  position,
  rotation = [Math.PI / 2, 0, 0],
  onRef,
  arduinoButtonPressed,
}) {
  const group = React.useRef();
  const ref = React.useRef();
  const { scene, animations: loadedAnimations } = useGLTF("/markerMan.glb");
  //console.log("Loaded animations:", loadedAnimations);

  const clone = React.useMemo(() => SkeletonUtils.clone(scene), [scene]);
  const { nodes, materials } = useGraph(clone);
  const { actions } = useAnimations(loadedAnimations, group);
  console.log("Loaded animations:", loadedAnimations);

  useEffect(() => {
    if (actions && arduinoButtonPressed) {
      const fullAnimationAction = actions["ALLANIMATIONS"];
      const fullAnimationActionTime =
        fullAnimationAction.getClip().duration * 1000 - 500;
      const danceAction = actions["DANCE2"];
      const danceActionTime = danceAction.getClip().duration * 1000 - 500;

      fullAnimationAction.play();
      setTimeout(() => {
        fullAnimationAction.fadeOut(0.5);
        danceAction.fadeIn(1.0).play();
        setTimeout(() => {
          danceAction.stop();
        }, danceActionTime);
      }, fullAnimationActionTime);
    }
  }, [actions, arduinoButtonPressed]);

  useEffect(() => {
    if (onRef) {
      onRef(ref);
    }
  }, [ref, onRef]);

  return (
    <group ref={group} dispose={null}>
      <group name="Scene" position={position}>
        <group
          name="MocapGuy_HiRes_Meshes"
          rrotation={[Math.PI / 2, 0, rotation[2]]}
          scale={0.001}
        />
        <group
          name="Armature007"
          rotation={[Math.PI / 2, 0, rotation[2]]}
          scale={0.001}
        >
          <primitive object={nodes.mixamorigHips} />
          <group name="MocapGuy_Body">
            <skinnedMesh
              name="MocapGuy_Body_1"
              geometry={nodes.MocapGuy_Body_1.geometry}
              material={materials.Body_MAT}
              skeleton={nodes.MocapGuy_Body_1.skeleton}
            />
            <skinnedMesh
              name="MocapGuy_Body_2"
              geometry={nodes.MocapGuy_Body_2.geometry}
              material={materials.Reflectors}
              skeleton={nodes.MocapGuy_Body_2.skeleton}
            />
          </group>
          <skinnedMesh
            name="MocapGuy_BrowsLashes"
            geometry={nodes.MocapGuy_BrowsLashes.geometry}
            material={materials.Brows_MAT}
            skeleton={nodes.MocapGuy_BrowsLashes.skeleton}
          />
          <skinnedMesh
            name="MocapGuy_Caruncula"
            geometry={nodes.MocapGuy_Caruncula.geometry}
            material={materials.Body_MAT}
            skeleton={nodes.MocapGuy_Caruncula.skeleton}
          />
          <skinnedMesh
            name="MocapGuy_Eyes"
            geometry={nodes.MocapGuy_Eyes.geometry}
            material={materials.Eyes_MAT}
            skeleton={nodes.MocapGuy_Eyes.skeleton}
          />
          <group name="MocapGuy_Hat">
            <skinnedMesh
              name="MocapGuy_Hat_1"
              geometry={nodes.MocapGuy_Hat_1.geometry}
              material={materials.Body_MAT}
              skeleton={nodes.MocapGuy_Hat_1.skeleton}
            />
            <skinnedMesh
              name="MocapGuy_Hat_2"
              geometry={nodes.MocapGuy_Hat_2.geometry}
              material={materials.Reflectors}
              skeleton={nodes.MocapGuy_Hat_2.skeleton}
            />
          </group>
          {/* <skinnedMesh
            name="MocapGuy_Teeth"
            geometry={nodes.MocapGuy_Teeth.geometry}
            material={materials.Body_MAT}
            skeleton={nodes.MocapGuy_Teeth.skeleton}
          /> */}
        </group>
        <mesh
          position={[0, -0.05, 0]}
          ref={ref}
          rotation={[Math.PI / 2, 0, rotation[2]]}
        >
          <boxGeometry args={[0.215, 0.22, 0.115]} />
          <meshStandardMaterial color="blue" transparent opacity={0.5} />
        </mesh>
      </group>
    </group>
  );
}

useGLTF.preload("/markerMan.glb");
