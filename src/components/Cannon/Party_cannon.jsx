/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.4.1 public/party_cannon.glb 
*/

import React, { useEffect, useRef, useState } from "react";
import { useGLTF } from "@react-three/drei";
import { useTrimesh } from "@react-three/cannon";
import { ObejctSpawner } from "../../helpers/item-spwaner";
import { ItemSelector } from "../../helpers/item-selcetor";
import RemoveLastItem from "../../helpers/delete-last-item";

export function PartyCannonn(onRef, position, rotation) {
  const ref = useRef();
  const { nodes, materials } = useGLTF("/party_cannon.glb");

  const wheelGeometry = nodes.item_4.geometry;
  const bodyGeometry = nodes.Object_5.geometry;

  const data1 = nodes.Object_4.geometry.attributes.position.array;
  const data2 = nodes.Object_4.geometry.index.array;
  const data3 = nodes.Object_5.geometry.attributes.position.array;
  const data4 = nodes.Object_5.geometry.index.array;

  const [wheelRef, wheelApi] = useTrimesh(
    () => ({
      type: "Static",
      mass: 2,
      rotation: [0, 0, -3.133],
      args: [data1, data2],
    }),
    useRef()
  );
  const [bodyRef, bodyApi] = useTrimesh(
    () => ({
      type: "Static",
      mass: 2,
      rotation: [0, 0, -3.133],
      args: [data3, data4],
    }),
    useRef()
  );

  // useEffect(() => {
  //   if (bodyApi.position) {
  //     bodyApi.position.set(...position);
  //   }
  //   if (bodyApi.rotation) {
  //     bodyApi.rotation.set(...rotation);
  //   }
  // }, [position, bodyApi.position, bodyApi]);

  // useEffect(() => {
  //   onRef(ref);
  // }, [ref, onRef]);

  return (
    <group dispose={null}>
      <group ref={ref}>
        <mesh
          geometry={wheelGeometry}
          material={materials.Cannon_Wheels}
          position={[-2.128, -0.528, 0.047]}
          ref={wheelRef}
        />
        <mesh
          geometry={bodyGeometry}
          material={materials.Cannon_Body}
          position={[-2.128, -0.528, 0.047]}
          ref={bodyRef}
        />
      </group>
    </group>
  );
}

export default function Cannon({ nodes, _geometry, currentItem }) {
  // console.log(_geometry);
  // console.log(nodes);
  const [objects, setObjects] = useState([]);

  return (
    <>
      <ObejctSpawner
        objects={objects}
        setObjects={setObjects}
        nodes={nodes}
        _geometry={_geometry}
        model={"cannon"}
        currentItem={currentItem}
      />
      <ItemSelector cubes={objects} setCubes={setObjects} isGLTF={true} />
      {currentItem === "cannon" && (
        <RemoveLastItem items={objects} setItems={setObjects} />
      )}
    </>
  );
}

useGLTF.preload("/party_cannon.glb");
